version: '3.8'

networks:
  app_network:
    driver: bridge

secrets:
  flask_secret_key:
    file: ./secrets/SECRET_KEY.txt
  db_password:
    file: ./secrets/DB_PASSWORD.txt


services:
  flask-app:
    build:
      context: ./flask-app
      dockerfile: Dockerfile

    image: ${PROJECT_NAME}flask-app:${TAG}

    container_name: flask-app

    env_file:
      - .env
      - .env.${ENVIRONMENT}
    environment:

      - FLASK_CONFIG=${FLASK_CONFIG}
    networks:
      - app_network

    volumes:
      - flask_data:/app/data
      - flask_logs:/app/logs
      - ./flask-app/config:/app/config:ro

    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5000/health" ] # on suppose que l'appli expose un endpoint /health
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s

    restart: on-failure

    secrets:
      - flask_secret_key
      - db_password

    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      restart_policy:
        condition: on-failure

  nginx-proxy:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - ${NGINX_PORT}:80
    networks:
      - app_network

    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx

    depends_on:
      flask-app:
        condition: service_healthy

    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost" ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
    restart: on-failure

    deploy:
      mode: global
      update_config:
        parallelism: 1
        delay: 5s
        failure_action: continue
      restart_policy:
        condition: on-failure


volumes: # volumes persisntants
  flask_data:
    driver: local
  flask_logs:
    driver: local
  nginx_logs:
    driver: local
